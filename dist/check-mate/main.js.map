{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-task/add-task.component.css","webpack:///./src/app/add-task/add-task.component.html","webpack:///./src/app/add-task/add-task.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.guard.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/landing/landing.component.css","webpack:///./src/app/landing/landing.component.html","webpack:///./src/app/landing/landing.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/task.service.ts","webpack:///./src/app/task.ts","webpack:///./src/app/update-task/update-task.component.css","webpack:///./src/app/update-task/update-task.component.html","webpack:///./src/app/update-task/update-task.component.ts","webpack:///./src/app/user.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".btn {\\n    margin-left: 5px;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <h3>Add a task:</h3>\\n  <form (submit)=\\\"addTask($event,formData)\\\" #formData=\\\"ngForm\\\">\\n    <div>\\n      <label for=\\\"task\\\">Task(description):</label>\\n      <input type=\\\"text\\\"\\n      name=\\\"task\\\"\\n      [(ngModel)]=\\\"newTask.task\\\"\\n      required\\n      minlength=\\\"3\\\"\\n      #task=\\\"ngModel\\\">\\n    </div>\\n    <div>\\n      <label for=\\\"priority\\\">Priority:</label>\\n      <select  \\n        name=\\\"priority\\\"\\n        [(ngModel)]=\\\"newTask.priority\\\"\\n        required\\n        minlength=\\\"1\\\"\\n        maxlength=\\\"1\\\"\\n        #priority=\\\"ngModel\\\">\\n        <option value=5>5</option>\\n        <option value=4>4</option>\\n        <option value=3>3</option>\\n        <option value=2>2</option>\\n        <option value=1>1</option>\\n      </select>\\n    </div>\\n    <div>\\n      <label for=\\\"note\\\">Notes(optional):</label>\\n      <input type=\\\"text\\\"\\n      name=\\\"note\\\"\\n      [(ngModel)]=\\\"newTask.note\\\">\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\" >Add Task</button>\\n    <button class=\\\"btn btn-primary\\\" (click)=\\\"return()\\\">Return</button>\\n  </form>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Task } from '../task';\n// import { NgForm } from '@angular/forms';  //used for clearing form\nimport { Router } from '@angular/router';\nimport { TaskService } from '../task.service';\nimport { CookieService } from 'ngx-cookie';\n\n\n\n@Component({\n  selector: 'app-add-task',\n  templateUrl: './add-task.component.html',\n  styleUrls: ['./add-task.component.css']\n})\nexport class AddTaskComponent implements OnInit {\n\n  newTask:Task = new Task();\n  owner_id:string;\n\n\n  constructor(\n    private router:Router,\n    private taskService:TaskService,\n    private cookieService: CookieService,\n  ) { }\n\n  ngOnInit() {\n    this.owner_id = this.cookieService.get('userID');\n  }\n\n  addTask(event:Event){\n    event.preventDefault();\n    // console.log(`task ${this.newTask.task} added successfully; priority level ${this.newTask.priority}`);\n\n    this.newTask.owner_id = this.owner_id;\n    \n    this.taskService.addTask(this.newTask).subscribe(task => {\n      console.log('task from api: ', task);\n      this.router.navigateByUrl('tasks');\n    });\n\n\n    //formData.reset();\n\n  }\n\n  return(){\n    this.router.navigateByUrl('tasks');\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { LandingComponent } from './landing/landing.component';\nimport { AddTaskComponent } from './add-task/add-task.component';\nimport { UpdateTaskComponent } from './update-task/update-task.component';\nimport { AuthGuard } from './auth.guard';\n\n\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: HomeComponent,\n\n  },\n  {\n    path: 'login',\n    component: LoginComponent,\n  },\n  {\n    path: 'register',\n    component: RegisterComponent,\n  },\n  {\n    path: 'tasks',\n    children:[\n      {\n        path:'',\n        component: LandingComponent,\n        canActivate: [AuthGuard],\n      },\n      {\n        path: 'addTask',\n        component: AddTaskComponent,\n        canActivate: [AuthGuard],\n      },\n      {\n        path: 'edit/:id',\n        component: UpdateTaskComponent,\n        canActivate: [AuthGuard],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n.jumbotron{\\n\\n    color: steelblue;\\n    height: 225px;\\n    padding-top: 10px;\\n}\\n\\n\\nh1{\\n    /* width: 100%; */\\n    display: inline-block;\\n    padding-top: 10px;\\n}\\n\\n\\n.header {\\n    width: 50%;\\n    display: inline-block;\\n    padding-top: 40px;\\n\\n}\\n\\n\\n.chess {\\n    vertical-align: top;\\n    display: inline-block;\\n    width: 40%;\\n}\\n\\n\\n.img-fluid{\\n    max-width: 25%;\\n    height: auto;\\n    display: inline-block;\\n}\\n\\n\\n.chess-img {\\n    height: auto;\\n    width: 50%;\\n    display: block;\\n    margin: 0 auto;\\n\\n\\n}\"","module.exports = \"<div class=\\\"jumbotron\\\">\\n    <div class=\\\"header\\\">\\n        <h1>Check-mate!</h1>\\n        <p>Get stuff done and have fun doing it.</p>\\n    </div>\\n    <div class=\\\"chess\\\">\\n        <img class=\\\"chess-img\\\" src=\\\"../assets/chess.png\\\" alt=\\\"chess piece\\\">\\n    </div>\\n</div>\\n<div class=\\\"container\\\">\\n    <router-outlet></router-outlet>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'check-mate';\n}\n","//import modules\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { CookieModule } from 'ngx-cookie';\n\n//import components\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\nimport { LandingComponent } from './landing/landing.component';\nimport { AddTaskComponent } from './add-task/add-task.component';\nimport { UpdateTaskComponent } from './update-task/update-task.component';\n\n//import services\nimport { TaskService } from './task.service';\nimport { AuthService } from './auth.service';\n\n//import guards\nimport { AuthGuard } from './auth.guard';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    RegisterComponent,\n    LoginComponent,\n    LandingComponent,\n    AddTaskComponent,\n    UpdateTaskComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    CookieModule.forRoot(),\n  ],\n  providers: [TaskService, AuthService, AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n} from '@angular/router';\n\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly auth: AuthService,\n    private readonly router: Router\n  ) {}\n\n  canActivate(_next: ActivatedRouteSnapshot, _state: RouterStateSnapshot): boolean {\n    const authed = this.auth.isAuthed();\n\n    if (!authed) {\n      this.router.navigateByUrl('/');\n    }\n\n    return authed;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from './user';\nimport { Observable } from '../../node_modules/rxjs';\nimport { CookieService } from 'ngx-cookie';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private base = '/api/auth/';\n  authorized$ = new BehaviorSubject(this.isAuthed());\n\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly cookieService: CookieService,\n  ) { }\n\n  login(user:User): Observable<User>{\n    return this.http\n    .post<User>(this.base + 'login', user)\n    .pipe(tap(() => this.authorized$.next(this.isAuthed())));\n  }\n\n  register(user:User): Observable<User>{\n    return this.http\n    .post<User>(this.base + 'register', user)\n    .pipe(tap(() => this.authorized$.next(this.isAuthed())));\n  }\n\n  logout(): Observable<boolean>{\n    return this.http\n    .delete<boolean>(this.base + 'logout').pipe(\n      tap(() => this.cookieService.removeAll()),\n      tap(() => this.authorized$.next(false))\n    );\n  }\n\n  isAuthed(): boolean{\n    const expired = parseInt(this.cookieService.get('expiration'), 10);\n    const userID = this.cookieService.get('userID');\n    const session = this.cookieService.get('session');\n\n    return expired && userID && session && expired > Date.now();\n  }\n\n}\n","module.exports = \".login{\\n    padding-bottom: 50px;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"login\\\">\\n    <app-login></app-login>\\n  </div>\\n  <a [routerLink]=\\\"['/register']\\\" >New User? Sign Up</a>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".btn {\\n    margin-left: 5px;\\n}\\n/* .btn-group {\\n    display:flex;\\n} */\\nul {\\n    list-style: none;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"tasklist\\\">\\n    <p class=\\\"text-primary\\\">Hello, {{user_name}}, you are logged in.</p>\\n    <div *ngIf='tasks_count == 0'>\\n        <ul class=\\\"alert alert-danger\\\">\\n          <li>Welcome! Let's get going. Enter your first task and hit check-mate button when completed!</li>\\n        </ul>\\n    </div>\\n    <h3>My tasks:</h3>\\n    <table class=\\\"table table-striped table-hover\\\">\\n      <thead>\\n        <th style=\\\"width:30%\\\">Task</th>\\n        <th style=\\\"width:5%\\\">Priority</th>\\n        <th style=\\\"width:25%\\\">Notes</th>\\n        <th style=\\\"width:40%\\\">Actions</th>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor='let task of tasks'>\\n          <td>{{task.task}}</td>\\n          <td>{{task.priority}}</td>\\n          <td>{{task.note}}</td>\\n          <td>\\n            <button class=\\\"btn btn-success btn-md btn-group\\\"(click)=\\\"deleteTask(task)\\\">check-mate!</button>\\n            <button class=\\\"btn btn-warning btn-md btn-group\\\" [routerLink]=\\\"['/tasks','edit',task._id]\\\" >update</button>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n  <button class=\\\"btn btn-primary btn-md\\\" (click)=\\\"addTask()\\\">Add a task</button>\\n  <button class=\\\"btn btn-primary btn-md\\\" (click)=\\\"signOut()\\\">Sign Out</button>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Task } from '../task';\nimport { TaskService } from '../task.service';\nimport { CookieService } from 'ngx-cookie';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.css']\n})\nexport class LandingComponent implements OnInit {\n\n  tasks:Array<Task> = [];\n  user_name;\n  owner_id:string;\n  tasks_count:number;\n\n    \n  \n  constructor(\n    private router: Router,\n    private TaskService: TaskService,\n    private AuthService: AuthService,\n    private cookieService: CookieService,\n  ) { }\n\n  ngOnInit() {\n    this.owner_id = this.cookieService.get('userID');\n    this.user_name = this.cookieService.get('user_name');\n    this.TaskService.getTasks().subscribe(tasks => {\n      console.log('retrieving tasks from db...');\n      this.tasks = tasks;\n      this.tasks = this.tasks.filter(task => task.owner_id == this.owner_id)\n      this.tasks_count = this.tasks.length;\n    });\n  }\n\n  signOut(){\n    this.AuthService.logout().subscribe(() =>{\n      console.log('User logged out succesfully');\n      this.router.navigateByUrl('');\n    })\n\n  }\n\n  addTask(){\n    this.router.navigateByUrl('tasks/addTask');\n\n  }\n\n  deleteTask(task:Task){\n    this.TaskService.deleteTask(task).subscribe(deletedTask => {\n      console.log(deletedTask,' deleted from db.');\n      this.tasks = this.tasks.filter(task => task._id !== deletedTask._id);\n    })\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf='errors.length'>\\n    <ul class=\\\"alert alert-danger\\\">\\n      <li *ngFor='let error of errors'>{{error}}</li>\\n    </ul>\\n</div>\\n<h3>Login:</h3>\\n<!-- {{user.email}} -->\\n<form (submit)=\\\"login($event,formLogin.value)\\\" #formLogin=\\\"ngForm\\\" >\\n  <div>\\n    <label for=\\\"email\\\">Email: </label>\\n    <input type=\\\"text\\\"\\n      name=\\\"email\\\"\\n      [(ngModel)]=\\\"user.email\\\"\\n      required\\n      minlength=\\\"3\\\"\\n      #email=\\\"ngModel\\\">\\n  </div>\\n  <div>\\n    <label for=\\\"password\\\">Password: </label>\\n    <input type=\\\"password\\\"\\n      name=\\\"password\\\"\\n      [(ngModel)]=\\\"user.password\\\"\\n      required\\n      minlength=\\\"8\\\"\\n      #password=\\\"ngModel\\\">\\n  </div>\\n    <button class=\\\"btn btn-primary\\\" [disabled]=\\\"!formLogin.valid\\\">Login</button>\\n</form>\\n<!-- data form validations -->\\n<div class=\\\"text-danger\\\" *ngIf=\\\"email.touched && email.errors\\\">\\n    <div *ngIf='email.errors.required'>You must enter an email. </div>\\n    <div *ngIf='email.errors.minlength'>Email must be at least 3 characters. </div>\\n</div>\\n<div class=\\\"text-danger\\\" *ngIf=\\\"password.touched && password.errors\\\">\\n    <div *ngIf='password.errors.required'>You must enter a password. </div>\\n    <div *ngIf='password.errors.minlength'>Password must be at least 8 characters. </div>\\n</div>\\n  <!-- end validations -->\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from '../user';\n// import { NgModel } from '@angular/forms';\nimport { AuthService } from '../auth.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  user: User = new User;\n  errors: string[] = [];\n\n  constructor(\n    private router: Router,\n    private authService:AuthService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  login($event, user:User){\n    // $event.preventDefault();\n    this.authService.login(user).subscribe(user => {\n      console.log('logging in user...', user.username);\n      this.router.navigateByUrl('tasks');\n    },\n    response => {\n        console.log('in response', response.error.error);\n        this.errors.push(response.error.error);\n        // this.handleErrors(response.error);\n      }\n    );\n  }\n\n  // private handleErrors(errors: string[] | Error): void {\n  //   let result = Array.isArray(errors);\n  //   this.errors = Array.isArray(errors) ? errors : [errors.message];\n  // }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf='errors.length'>\\n    <ul class=\\\"alert alert-danger\\\">\\n        <li *ngFor='let error of errors'>{{error}}</li>\\n    </ul>\\n</div>\\n<h3>Registration:</h3>\\n<form (submit)=\\\"register(formReg.value)\\\" #formReg=\\\"ngForm\\\" >\\n  <div>\\n    <label for=\\\"username\\\">Username (3 chars.): </label>\\n    <input type=\\\"text\\\"\\n      name=\\\"username\\\"\\n      [(ngModel)]=\\\"user.username\\\"\\n      required\\n      minlength=\\\"3\\\"\\n      #username=\\\"ngModel\\\">\\n  </div>\\n  <div>\\n    <label for=\\\"email\\\">Email: </label>\\n    <input type=\\\"text\\\"\\n      name=\\\"email\\\"\\n      [(ngModel)]=\\\"user.email\\\"\\n      required\\n      #email=\\\"ngModel\\\">\\n  </div>\\n  <div>\\n    <label for=\\\"password\\\">Password (8 char.): </label>\\n    <input type=\\\"password\\\"\\n      name=\\\"password\\\"\\n      [(ngModel)]=\\\"user.password\\\"\\n      required\\n      minlength=\\\"8\\\"\\n      #password=\\\"ngModel\\\">\\n  </div>\\n    <button [disabled]=\\\"!formReg.valid\\\">Register</button>\\n</form>\\n<!-- data form validations -->\\n<div class=\\\"text-danger\\\" *ngIf=\\\"username.touched && username.errors\\\">\\n    <div *ngIf='username.errors.required'>You must enter a username. </div>\\n    <div *ngIf='username.errors.minlength'>Username must be at least 3 characters. </div>\\n</div>\\n<div class=\\\"text-danger\\\" *ngIf=\\\"email.touched && email.errors\\\">\\n    <div *ngIf='email.errors.required'>You must enter an email. </div>\\n</div>\\n<div class=\\\"text-danger\\\" *ngIf=\\\"password.touched && password.errors\\\">\\n    <div *ngIf='password.errors.required'>You must enter a password. </div>\\n    <div *ngIf='password.errors.minlength'>Password must be at least 8 characters. </div>\\n</div>\\n  <!-- end validations -->\\n\\n  <a [routerLink]=\\\"['/']\\\" >Return</a>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user';\nimport { NgForm } from '../../../node_modules/@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  user:User = new User();\n  errors: string[] = [];\n\n  constructor(\n    private router: Router,\n    private auth: AuthService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  register(user: User){\n    console.log('regisering user...', user);\n    event.preventDefault();\n\n    this.auth.register(user).subscribe(()=>{\n      console.log('registration successful...');\n      this.router.navigateByUrl('tasks');\n    },\n      response => {\n        this.errors.push(response.error.error);\n    }\n  );\n    \n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { Task } from './task';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  private base = '/api/tasks';\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getTasks(): Observable<Task[]>{\n    return this.http.get<Task[]>(this.base);\n  }\n\n  addTask(task:Task): Observable<Task>{\n    return this.http.post<Task>(this.base, task);\n  }\n\n  updateTask(id:string, task:Task): Observable<Task>{\n    return this.http.put<Task>(`${this.base}/${id}`, task);\n  }\n\n  deleteTask(task:Task): Observable<Task> {\n    return this.http.delete<Task>(`${this.base}/${task._id}`);\n  }\n\n}\n","export class Task {\n    _id:string;\n    task:string;\n    priority:Number;\n    note:string;\n    owner_id:string;\n  }","module.exports = \".btn {\\n    margin-left: 5px;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <h3>Update task:</h3>\\n  <!-- {{updatedTask.task}} -->\\n  <form (submit)=\\\"updateTask($event,formData)\\\" #formData=\\\"ngForm\\\">\\n    <div>\\n      <label for=\\\"task\\\">Task(description):</label>\\n      <input type=\\\"text\\\"\\n      name=\\\"task\\\"\\n      [(ngModel)]=\\\"updatedTask.task\\\"\\n      required\\n      minlength=\\\"3\\\"\\n      #task=\\\"ngModel\\\">\\n    </div>\\n    <div>\\n      <label for=\\\"priority\\\">Priority:</label>\\n      <select  \\n        name=\\\"priority\\\"\\n        [(ngModel)]=\\\"updatedTask.priority\\\"\\n        required\\n        minlength=\\\"1\\\"\\n        maxlength=\\\"1\\\"\\n        #priority=\\\"ngModel\\\">\\n        <option value=5>5</option>\\n        <option value=4>4</option>\\n        <option value=3>3</option>\\n        <option value=2>2</option>\\n        <option value=1>1</option>\\n      </select>\\n    </div>\\n    <div>\\n      <label for=\\\"note\\\">Notes(optional):</label>\\n      <input type=\\\"text\\\"\\n      name=\\\"note\\\"\\n      [(ngModel)]=\\\"updatedTask.note\\\">\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\" >Update Task</button>\\n    <button class=\\\"btn btn-primary\\\" (click)=\\\"return()\\\">Return</button>\\n  </form>\\n</div>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Task } from '../task';\nimport { TaskService } from '../task.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-update-task',\n  templateUrl: './update-task.component.html',\n  styleUrls: ['./update-task.component.css']\n})\nexport class UpdateTaskComponent implements OnInit {\n\n  tasks:Array<Task> = [];\n  updatedTask:Task = new Task();\n\n  constructor(\n    private taskService:TaskService,\n    private route:ActivatedRoute,\n    private router:Router,\n  ) { }\n\n  ngOnInit() {\n    this.taskService.getTasks().subscribe( tasks => {\n      this.tasks = tasks;\n\n\n      this.route.params.subscribe( param =>{\n        console.log('param id:', param.id)\n\n        for (let idx=0; idx < this.tasks.length; idx++) {\n\n          if (this.tasks[idx]._id == param.id) {\n            this.updatedTask = this.tasks[idx];\n            console.log('found matching task:', this.updatedTask.task)\n            break;\n          }\n        }\n\n      });\n    });\n  }\n\n  updateTask(){\n    console.log('updating task', this.updatedTask)\n\n    this.taskService.updateTask(this.updatedTask._id, this.updatedTask).subscribe(task => {\n      console.log('from api...updated task', task);\n\n      this.taskService.getTasks().subscribe( tasks => {\n        this.tasks = tasks;\n      });\n\n      this.router.navigateByUrl('tasks');\n\n    });\n    \n\n  }\n\n  return(){\n    this.router.navigateByUrl('tasks');\n\n  }\n\n\n}\n","export class User {\n    username:string;\n    email:string;\n    password:string;\n  }","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}